import java.util.Scanner;

public class MidtermExam
{
    public static void main(String[] args)
    {
        Scanner input = new Scanner(System.in);

        //universal variables
        char choice, stackchoice, queuechoice, exitchoice;
        int stackctr = 0, stackpush = 0, stackpop = 0, queuectr = 0, queue, dequeue;

        //start of main loop
        do
            {
            System.out.print("What would you like to do?\nA - Stack\nB - Queue\nC - Exit\n\nInput Choice: ");
            choice = input.next().charAt(0);

            //Stackmenu
            if (choice == 'a' || choice == 'A')
            {
                //Creates a stack based on user input by making the user input the initialization param
                System.out.print("How big will the stack be?\n");
                int[] stackarray = new int[input.nextInt()];

                //Begin stack manipulation loop
                do
                {
                    System.out.print("\nA. Push\nB. Pop\nC. Display\nD. Done with Stack\n\nInput Choice: ");
                    stackchoice = input.next().charAt(0);

                    //Push to stack
                    if (stackchoice == 'a' || stackchoice == 'A')
                    {
                        if(stackctr >= stackarray.length)
                            System.out.println("Error: Stack is full.");

                        else
                        {
                            //Set value at current position of stack
                            System.out.print("Enter number: ");
                            stackarray[stackctr] = input.nextInt();

                            System.out.println("Pushed " + stackarray[stackctr] + " to stack.");

                            //Increase numbers known to be in stack
                            stackctr++;
                        }
                    }

                    //Pop from stack
                    //Takes the last number entered, mirroring the LIFO nature of a stack
                    else if (stackchoice == 'b' || stackchoice == 'B')
                    {
                        if (stackctr == 0)
                            System.out.println("Error: no value in stack.");

                        else
                        {
                            System.out.println("Popped " + stackarray[stackctr] + " from stack.");

                            //Decrease numbers known to be in stack
                            stackctr--;

                            //Reset value at current position to nothing
                            stackarray[stackctr] = 0;
                        }
                    }

                    //Display the stack
                    else if (stackchoice == 'c' || stackchoice == 'C')
                    {
                        //Check first if the stack has anything in it
                        if(stackctr <= 0)
                            System.out.println("Error: Stack is empty");

                        //Display all known numbers in the stack from the last number entered
                        else
                        {
                            System.out.println("Stack contains:");
                            System.out.print("[ ");
                            for (int ctr = stackctr - 1; ctr >= 0; ctr--)
                                System.out.printf("%d ", stackarray[ctr]);
                            System.out.print("]");
                        }
                    }

                } while (stackchoice != 'd' && stackchoice != 'D');
            }

            //Queuemenu
            else if (choice=='b'||choice=='B')
            {
                //Creates a queue based on user input by making the user input the initialization param
                System.out.print("How big will the queue be?\n");
                int[] queuearray = new int[input.nextInt()];

                //Queue manipulation loop
                do
                {
                    System.out.println("\nA. Queue\nB. Dequeue\nC. Display\nD. Done with Queue\n\n");
                    queuechoice = input.next().charAt(0);

                    //Enqueue
                    if (queuechoice == 'a' || queuechoice == 'A')
                    {
                        if(queuectr < queuearray.length)
                        {
                            System.out.print("Enter number: ");
                            queuearray[queuectr] = input.nextInt();
                            queuectr++;
                        }

                        else
                            System.out.println("Queue is full");
                    }
                    else if (queuechoice=='b'||queuechoice=='B'){
                        if (queuearray[0]==0)
                            System.out.println("Error: no value in queue.");
                        else{
                            queue = queuearray[0];
                            queue = queue-queue;
                            queuearray[0]=queue;
                        }
                    }
                    else if (queuechoice=='c'||queuechoice=='C'){
                        for (queuectr = 0;queuectr<queuearray.length;queuectr++){
                            if (queuearray[queuectr]!=0)
                                System.out.println(queuearray[queuectr]);
                        }
                        System.out.println("Do you wish to exit the stack menu? (y/n)");
                        exitchoice = input.next().charAt(0);
                        if (exitchoice == 'y'|| exitchoice == 'Y')
                            break;
                    }
                }while(queuechoice != 'd' && queuechoice != 'D');
            }
        } while (choice != 'c' && choice != 'C');
        System.exit(0);
    }
}
